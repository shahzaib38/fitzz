apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "imagetrack.app.trackobject"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 5
        versionName "2.0"

        testInstrumentationRunner "image.app.trackobject.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"

    }
//    compileKotlin {
//        kotlinOptions {
//            languageVersion = "1.4"
//        }
//    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-ml-vision:18.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.mlkit:face-detection:16.0.4'


    //Fragment Ktx
    implementation 'androidx.fragment:fragment-ktx:1.2.5'


    //Glide Libraryw
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'


    //Hilt


    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02"
    kapt "androidx.hilt:hilt-compiler:1.0.0-alpha02"

    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.1.0"


    // Pattern LockView
    implementation 'com.andrognito.patternlockview:patternlockview:1.0.0'

    // material design
    implementation 'com.google.android.material:material:1.3.0-beta01'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'

    // Fresco Library
    implementation 'com.facebook.fresco:fresco:2.3.0'

    // Exo Player
    implementation 'com.google.android.exoplayer:extension-okhttp:2.9.6'

    implementation 'com.devbrackets.android:playlistcore:2.0.1'
    implementation 'com.devbrackets.android:exomedia:4.3.0'

    // Searchable View
    implementation 'br.com.mauker.materialsearchview:materialsearchview:2.0.0-alpha03'

    //PinLock Library
    implementation 'com.andrognito.pinlockview:pinlockview:2.1.0'
    // Data Store
    implementation "androidx.datastore:datastore-preferences:1.0.0-alpha01"

    //Lifecycle owner
    def lifecycle_version = "2.3.0"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'com.jakewharton.timber:timber:4.7.1'


    // View Pager
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    //Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'


//    // CameraX core library
//    def camerax_version = '1.0.0-rc01'
//
//
//    //Camera View
//    implementation 'androidx.camera:camera-view:1.0.0-alpha20'
//
//
//    // CameraX Lifecycle library
//    implementation "androidx.camera:camera-lifecycle:$camerax_version"
//


    // CameraX core library using the camera2 implementation
    def camerax_version = "1.0.0-rc03"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha22"
    // If you want to additionally use the CameraX Extensions library
    implementation "androidx.camera:camera-extensions:1.0.0-alpha22"


    // Text Recognition
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:16.1.3'


    implementation 'com.squareup.picasso:picasso:2.71828'


    implementation project(':detectionfeatures')


    ///Copy this
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:4.13"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.1"


    // Required -- JUnit 4 framework
    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.3.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:3.5.11'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'org.mockito:mockito-inline:2.13.0'

    testImplementation 'org.assertj:assertj-core:3.19.0'


    //
    implementation platform('com.google.firebase:firebase-bom:28.0.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging'



    //Ui Test
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    debugImplementation("androidx.fragment:fragment-testing:1.3.3")
    testImplementation("com.google.dagger:hilt-android-testing:2.28-alpha")
    // ...with Kotlin.
    kaptTest("com.google.dagger:hilt-android-compiler:2.28-alpha")
    // ...with Java.
    testAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.28-alpha")


    // For instrumented tests.
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.28-alpha")
    // ...with Kotlin.
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.28-alpha")
    // ...with Java.
    androidTestAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.28-alpha")


    //Admob
    implementation 'com.google.android.gms:play-services-ads:20.1.0'

    //Retrofit
//    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
//    implementation 'com.squareup.retrofit2:converter-gson::2.7.1'



}
