apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: "de.mannodermaus.android-junit5"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "imagetrack.app.trackobject"
        minSdkVersion 25
        targetSdkVersion 30
        versionCode 7
        versionName "3.0.1"

        testInstrumentationRunner "imagetrack.app.trackobject.CustomTestRunner"
//            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 2) Connect JUnit 5 to the runner
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        android.defaultConfig.manifestPlaceholders = [
                'appAuthRedirectScheme': 'https'
        ]

    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"

    }

}




dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-ml-vision:18.0.1'
//    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //Fragment Ktx
    implementation 'androidx.fragment:fragment-ktx:1.2.5'


    //Glide Libraryw
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'


    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02"
    kapt "androidx.hilt:hilt-compiler:1.0.0-alpha02"

    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.1.0"

    // material design
    implementation 'com.google.android.material:material:1.3.0-beta01'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'

    //Lifecycle owner
    def lifecycle_version = "2.3.0"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // CameraX core library using the camera2 implementation
    def camerax_version = "1.0.0-rc03"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha22"
    // If you want to additionally use the CameraX Extensions library
    implementation "androidx.camera:camera-extensions:1.0.0-alpha22"


    // Text Recognition
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:16.1.3'

    implementation project(':detectionfeatures')

    testImplementation 'org.assertj:assertj-core:3.19.0'
    androidTestImplementation  'org.assertj:assertj-core:3.19.0'

    //Firebases
    implementation platform('com.google.firebase:firebase-bom:28.0.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging'

    //Ui Test
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    debugImplementation("androidx.fragment:fragment-testing:1.3.3")
    testImplementation("com.google.dagger:hilt-android-testing:2.28-alpha")
    // ...with Kotlin.
    kaptTest("com.google.dagger:hilt-android-compiler:2.28-alpha")
    // ...with Java.
    testAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.28-alpha")


    // For instrumented tests.
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.28-alpha")
    // ...with Kotlin.
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.28-alpha")
    // ...with Java.
    androidTestAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.28-alpha")



    //Gson Version
    implementation "com.google.code.gson:gson:2.8.2"

   //Room DataBase

    def room_version = "2.3.0"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"


    // Play Billing Library
    def billing_version = "4.0.0"
    implementation "com.android.billingclient:billing:$billing_version"

    //Cloud Function
    implementation "com.google.firebase:firebase-functions:12.0.1"



    implementation "com.google.firebase:firebase-auth-ktx:21.0.1"

    // [START gradle_firebase_ui_auth]
    implementation "com.firebaseui:firebase-ui-auth:7.2.0"


    //OpenId OAuth 2.0
    implementation 'net.openid:appauth:0.9.0'

    //Deep Link
    implementation 'com.google.firebase:firebase-dynamic-links'

    //Okio
    implementation 'com.squareup.okio:okio:2.10.0'


    //Pervious Version OAuth 2.0 "com.google.auth:google-auth-library-oauth2-http:0.3.0"

    // OAuth2 for Google API
    implementation("com.google.auth:google-auth-library-oauth2-http:0.3.0")
            {
        exclude module: 'jsr305'
        exclude module: 'httpclient'
    }

    //Retrofit

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'


    // junit Testing


    //Jupitor for
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"

    //Junit unit 4 Requirement if Needed
    testImplementation "junit:junit:4.13"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.1"




    //Android Instrumental Test
   // androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // 5) The instrumentation test companion libraries
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.2.2"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.2.2"
    androidTestImplementation "androidx.test:runner:1.4.0"
    //Mockito

    androidTestImplementation "org.mockito:mockito-android:3.3.3"
//    androidTestImplementation "org.mockito:mockito-inline:3.7.7"
    testImplementation "org.mockito:mockito-core:3.7.7"
//
//    //Hilt Testing
//    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.35'
//    // ...with Kotlin.
//    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.35'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"






}
